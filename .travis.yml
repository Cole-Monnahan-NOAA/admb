sudo: require
language: cpp

git:
  depth: false

branches:
  only:
    - master
    - coverity_scan

notifications:
  email: false

env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   - secure: "gLPB2O2wRnmF5cDcdnKqkQEAVCfNHjk20B9b92h/c0ws7YOw1TQ37ueT0MYdMm306v4x2Q+SDMgb/17C0G0K/rqls6AbYMhfpWWQkH+zkv6gamAIDTYFhPSRj9+qyh6pShNUbjXIIHmf3g+4V40LcPlQH/Q+2c6cCO8zcPpGxXrs5J3nh//nQ6pJLgi5iQN5mTJbMdmO7euMMShqO36eVNFT5p0AfLbJkuDgE+A+GrGUPYZ8RAOZ4c/YnKHtDeEu8IvjoM+9mudbQKf66AatXAwkw7vV63Qcw2Vt7eGe94i2uyaNGptc76XibHT6pf6QpawkXDSyFtd7hZ1GVyAxuf2/eICtMUrusAq1TIhCRzwr25SjjSJhBS8trBk7QV20uAeA/3BgODjskkY4rYJIF7rOOy33i65Q9L1l+My3/ufi81pEa0BEKo69bkRePUY6FpWZgu4Y9hXTbiNFo/5+2C3xujZ6sQAO+UGBlK0rljXCiwNqgTiatTa3VQ57QMjplok2AIc28+uh7NHhKNFWTMsz5VJZTr7OA+wyabdx5hD+TVCNstFit/toaqrWHEy/yDpqFRYq5fVG1esxuzFy7clUrJEtVqokUCzl5muMO45ToTgQLMlD5JsfV6kIpkj71Sn/fVTyvl249yqvPR3ospPUN0rSt56tUan604mHoHI="

before_install:
  - echo -n | openssl s_client -connect https://scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-

addons:
  coverity_scan:
    project:
      name: "admb-project/admb"
      description: "ADMB Project"
    notification_email: johnoel@hawaii.edu
    build_command_prepend: "make clean"
    build_command: "make dist test"
    branch_pattern: coverity_scan

matrix:
  include:
  - os: linux
    env:
     - CXXFLAGS="-coverage -O0" LDFLAGS="-coverage -O0" DEBUG="yes" PROG=
    dist: xenial
    compiler: gcc
    before_install:
    - sudo pip install codecov
    after_success:
    - bash <(curl -s https://codecov.io/bash) -a "--object-directory=build/objects/debug"
    script:
    - make clean
    - make coverage
    - codecov

  include:
  - os: linux
    env:
     - CXXFLAGS="-coverage -O0" LDFLAGS="-coverage -O0" DEBUG="yes" PROG=
    dist: xenial
    compiler: gcc
    before_install:
    - sudo pip install codecov
    after_success:
    - bash <(curl -s https://codecov.io/bash) -a "--object-directory=build/objects/debug"
    script:
    - make clean
    - make coverage
    - codecov

  - os: linux
    dist: xenial
    env:
     - SAFE_ONLY=yes
     - DEBUG=yes
     - PROG=../../../utilities/run-valgrind-memcheck
    before_install:
    - sudo apt-get install -y valgrind
    compiler: gcc
    script:
    - make clean
    - make dist 
    - make --directory=examples admb

  - os: linux
    dist: xenial
    env:
     - SAFE_ONLY=yes
     - DEBUG=yes
     - PROG=../../../utilities/run-valgrind-memcheck
    before_install:
    - sudo apt-get install -y valgrind
    compiler: gcc
    script:
    - make clean
    - make dist 
    - make --directory=examples ham4

  - os: linux
    dist: xenial
    env:
     - SAFE_ONLY=yes
     - DEBUG=yes
     - PROG=../../../utilities/run-valgrind-memcheck
    before_install:
    - sudo apt-get install -y valgrind
    compiler: gcc
    script:
    - make clean
    - make dist 
    - make --directory=examples ham5

  - os: linux
    dist: xenial
    env:
     - SAFE_ONLY=yes
     - DEBUG=yes
     - PROG=../../../utilities/run-valgrind-memcheck
    before_install:
    - sudo apt-get install -y valgrind
    compiler: gcc
    script:
    - make clean
    - make dist 
    - make --directory=examples admb-re

  - os: linux
    dist: xenial
    env:
     - SAFE_ONLY=yes
     - DEBUG=yes
     - PROG=../../../utilities/run-valgrind-memcheck
    before_install:
    - sudo apt-get install -y valgrind
    compiler: gcc
    script:
    - make clean
    - make dist 
    - make --directory=examples logistic

  - os: linux
    dist: xenial
    env:
     - SAFE_ONLY=yes
     - DEBUG=yes
     - PROG=../../../utilities/run-valgrind-memcheck
    before_install:
    - sudo apt-get install -y valgrind
    compiler: gcc
    script:
    - make clean
    - make dist 
    - make --directory=examples nested4

  - os: linux
    dist: xenial
    env:
     - SAFE_ONLY=yes
     - DEBUG=yes
     - PROG=../../../utilities/run-valgrind-memcheck
    before_install:
    - sudo apt-get install -y valgrind
    compiler: gcc
    script:
    - make clean
    - make dist 
    - make --directory=examples skewed

  - os: linux
    dist: xenial
    env:
     - SAFE_ONLY=yes
     - DEBUG=yes
     - PROG=../../../utilities/run-valgrind-memcheck
    before_install:
    - sudo apt-get install -y valgrind
    compiler: gcc
    script:
    - make clean
    - make dist 
    - make --directory=examples socatt

  - os: linux
    dist: xenial
    env:
     - SAFE_ONLY=yes
     - DEBUG=yes
     - PROG=../../../utilities/run-valgrind-memcheck
    before_install:
    - sudo apt-get install -y valgrind
    compiler: gcc
    script:
    - make clean
    - make dist 
    - make --directory=examples spatial

  - os: linux
    dist: xenial
    env:
     - SAFE_ONLY=yes
     - DEBUG=yes
     - PROG=../../../utilities/run-valgrind-memcheck
    before_install:
    - sudo apt-get install -y valgrind
    compiler: gcc
    script:
    - make clean
    - make dist 
    - make --directory=examples union

  - os: linux
    dist: xenial
    env:
     - SAFE_ONLY=yes
     - DEBUG=yes
     - PROG=../../../utilities/run-valgrind-memcheck
    before_install:
    - sudo apt-get install -y valgrind
    compiler: gcc
    script:
    - make clean
    - make dist 
    - make --directory=examples weights

  - os: linux
    dist: xenial
    env:
     - SAFE_ONLY=yes
     - DEBUG=yes
     - PROG=../../../utilities/run-valgrind-cachegrind
    before_install:
    - sudo apt-get install -y valgrind
    compiler: gcc
    script:
    - make clean
    - make dist 
    - make --directory=examples admb

  - os: linux
    dist: xenial
    env:
     - SAFE_ONLY=yes
     - DEBUG=yes
     - PROG=../../../utilities/run-valgrind-cachegrind
    before_install:
    - sudo apt-get install -y valgrind
    compiler: gcc
    script:
    - make clean
    - make dist 
    - make --directory=examples admb-re

  - os: linux
    dist: xenial
    env:
     - SAFE_ONLY=yes
     - DEBUG=yes
     - PROG=../../../utilities/run-valgrind-callgrind
    before_install:
    - sudo apt-get install -y valgrind
    compiler: gcc
    script:
    - make clean
    - make dist 
    - make --directory=examples admb

  - os: linux
    dist: xenial
    env:
     - SAFE_ONLY=yes
     - DEBUG=yes
     - PROG=../../../utilities/run-valgrind-callgrind
    before_install:
    - sudo apt-get install -y valgrind
    compiler: gcc
    script:
    - make clean
    - make dist 
    - make --directory=examples admb-re

  - os: linux
    dist: xenial
    compiler: gcc
    script:
    - make clean
    - make dist 
    - make verify
    - make gtests

  - os: linux
    dist: xenial
    compiler: gcc
    script:
    - make clean
    - make
    - make gtests

  - os: linux
    dist: xenial
    compiler: gcc
    script:
    - make clean
    - make dist
    - make shared
    - make all
    - make gtests

  - os: linux
    dist: xenial
    compiler: gcc
    script:
    - make clean
    - make shared
    - make dist
    - make all
    - make gtests

  - os: osx
    before_install:
    - sudo pip install scan-build
    compiler: clang
    env:
     - DEBUG=yes
    script:
    - make clean
    - scan-build -v make dist

  - os: osx
    before_install:
    - sudo pip install cpplint
    script:
    - make clean
    - cpplint --recursive --filter=-whitespace src

  - os: osx
    env:
     - SAFE_ONLY=yes
    compiler: clang
    script:
    - make clean
    - make dist
    - make test

  - os: osx
    env:
     - SAFE_ONLY=yes
    compiler: gcc
    script:
    - make clean
    - make dist
    - make test

  - os: windows
    install: choco install -y make
    env:
    - SAFE_ONLY=yes
    compiler: gcc
    script:
    - make.exe clean
    - make.exe dist
    - make.exe gtests

  - os: windows
    env:
    - SAFE_ONLY=yes
    script:
    - utilities/travis-windows-vc-build.bat

  - os: windows
    env:
    - DEBUG=yes
    script:
    - utilities/travis-windows-vc-build-analyze.bat
